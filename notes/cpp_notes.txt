
1. Accelerated C++ by Andrew Koenig & Barbara Moo -- Read and practice example code and exercises from this book first.

2. Programming: Principles and Practice Using C++ (2nd Edition) by Bjarne Stroustrup -- Chapters 5,6, and 7 are gems in this book. You can in fact use this book in parallel with the Accelerated C++ book and

3. (a) The C++ Programming Language (4th Edition) by Bjarne Stroustrup, -- Definite reference book to have.
3. (b) The C++ Standard Library: A Tutorial and Reference (2nd Edition) by Nicolai M. Josuttis, -- Clear examples and very methodical
3. (c) C++ Templates: The Complete Guide by David Vandevoorde -- What can I say! This is simply a classic.

========== General
* RAII - Resource Allocation Is Initialization

* Tutorials/Resources:
    * Function Pointers - http://www.newty.de/fpt/fpt.html


========== Templates
    * provides a way to re-use source code as compared to inheritance and composition which provide a way to re-use object code 

    * function templates
        * write generic functions that can be used with arbitrary types
        * the library generic algos have been implemented as function templates

    * class templates
        * containers have been implemented as class templates


========== Casting
* Static Cast
    * compile time cast
    * example

        void *v_ptr;
        int  *i_ptr;

        static_cast<int *>v_ptr;  // cast void pointer to int pointer



========== Pointers
* Types
    * Raw pointers

    * References
        * references (like constants) must be initialized and cannot be assigned to
        * once reference is established, cannot change the reference to reference another object
        * pointers can point to NULL, but references always refer to an object
        * references is like a read only raw pointer (pointer address can't be changed)
        * no special syntax is needed for derefercing or referencing
            * can't take the address of a reference like you can with pointer
            * no "reference arithmetics"

        * Google Style Guide suggests (may be outdated):
            * input parameters should be const references
            * outputs should be pointers

        * Generally it seems this is the order of use:
            1. Use plain objects and references until you can't
            2. Use smart pointers until you can't
            3. Use raw pointers

        * example
            int i = 5;
            int & j = i; 

            everywhere the reference j is encountered, it is replaced with 
            the address of i. the reference content address is resolved at compile time
            and there is no need to dereference it like a ptr at run time.  

        * References vs Pointers
            * Pointer Declaration:
                int i = 3;
                int *pi = &i;
                *pi = 4;   // change i to 4

            * Reference Declaration:
                int i = 3;
                int &ri = i;
                ri = 4;   // change i to 4

        * To clarify a misconception:
            The C++ standard is very careful to avoid dictating how a compiler must implement references,
            but every C++ compiler implements references as pointers. That is, a declaration such as:
            " int &ri = i; " if it's not optimized away entirely, allocates the same amount of storage as a pointer,
            and places the address of i into that storage. So, a pointer and a reference both occupy the same amount of memory.

    * Smart pointers
        * std::unique_ptr
            * owns and manages another object through a pointer and deletes the object when unique_ptr goes out of scope
            * no other smart pointers can point to the object. doesn't have a copy constructor.
            * examples:
                std::unique_ptr<int>    p1(new int);
                std::unique_ptr<int[]>  p2(new int[50]);
                std::unique_ptr<Object> p3(new Object("Lamp"));

            * try to use "make_unique" function to create the pointer:
                std::unique_ptr<int>    p1 = std::make_unique<int>();
                std::unique_ptr<int[]>  p2 = std::make_unique<int[]>(50);
                std::unique_ptr<Object> p3 = std::make_unique<Object>("Lamp");

        * std::shared_ptr
            * owns and manages another object through a pointer
            * there can be multiple references to the same object
            * internal reference counter keeps track of each shared_ptr that goes out of scope. when counter hits 0, deletes the object.
            * beware of circular references
            * examples:
                std::shared_ptr<int>    p1(new int);
                std::shared_ptr<Object> p3(new Object("Lamp"));

            * try to use "make_unique" function to create the pointer:
                std::shared_ptr<int>    p1 = std::make_shared<int>();
                std::shared_ptr<Object> p3 = std::make_shared<Object>("Lamp");

        * std::weak_ptr
            * a shared_ptr that doesn't increase the reference count
            * holds a non-owning(weak) reference to an object that is managed by another std::shared_ptr
            * can only create a weak_ptr out of a shared_ptr or another weak_ptr
            * examples:
                (p_weak1 and p_weak2 do not increase the reference count on p_shared)
                std::shared_ptr<int> p_shared = std::make_shared<int>(100);
                std::weak_ptr<int>   p_weak1(p_shared);
                std::weak_ptr<int>   p_weak2(p_weak1);

            * weak_ptr is like an inspector on shared_ptr. Must convert it to shared_ptr with "lock()" to operate on object:
                std::shared_ptr<int> p_shared = std::make_shared<int>(100);
                std::weak_ptr<int>   p_weak(p_shared);
                // ...
                std::shared_ptr<int> p_shared_orig = p_weak.lock()

            * reasons for inspector mode:
                * can use the "expired()" method which checks whether the referenced object was already deleted
                * you can attempt to promote the weak_ptr to strong using "lock()":
                    * if succeeds, you get a strong pointer to the object
                    * if fails, then that object no longer exists (and we can throw away the weak_ptr)
                * dangling ptr problem: it's impossible to know if raw pointer referenced data has been deallocated or not


========== stdlib
* std::vector
    * examples
        * std::vector<int> first;             // empty vector of ints
        * std::vector<int> second (4, 100);   // four ints with value 100

    * "vector::emplace_back"
        * inserts a new element at the end of the vector

* std::async()
    * function template that accepts a callback as an argument and potentially executes them asynchronously

    * example:

        #include <chrono>
        #include <thread>
        #include <string>

        std::string fetchDataFromDB(std::string recvdData) {
            std::this_thread::sleep_for(seconds(5));

            return "stuff" + recvdData;
        }

        int main() {
            system_clock::time_point start = system_clock::now();
            std::future<std::string> resultFromDB = std::async(std::launch::async, fetchDataFromDB, "Data");

            // Fetch Data from DB
            // Will block till data is available in future<std::string> object
            std::string dbData = resultFromDB.get();
 
            // Get End Time
            auto end = system_clock::now();
        
            auto diff = duration_cast < std::chrono::seconds > (end - start).count();
            std::cout << "Total Time Taken = " << diff << " Seconds" << std::endl;

            return 0;
        }

* std::function()
    * Container for holding function-like objects. Commonly used as alternative to function pointers.
    * Retains state within scope (function pointers do not)

    * Can typedef a function pointer like so:

        typedef std::function<unsigned int(int request &, int response *)> fn_ReqRes;

        struct ControlHandler {
            unsigned int handler(int req &, int res *) {
                return 0;
            }
        };

        fn_ReqRes my_handler{ ControlHandler() };
        res = my_handler(arg1, arg2);

    * If we wanted to use it to store lambda
        fn_ReqRest = [](int a, int b) {return 0};

========== Lambda
* std::function vs function ptr vs lambda

    * std::function
        * retains state in scope
        * requires syntactic overhead of a class definition
        * most flexible
    * function pointer
        * minimal syntactic overhead
        * does not retain state within a scope
    * lambda
        * combines benefits of function pointers and function objects and avoid disadvantages
        * compared to function obj:
            * lambda is flexible and can maintain state
            * compact syntax doesn't require an explicit class definition

* In simple cases, the return type of the lambda is deduced by compiler for you:
    [](double d) {return d < 0.00001 ? 0 : d; }

* More complex lambdas where compiler can't deduce. If so, can explicitly specify return type
    * [](double d) -> double {
          if (d < 0.0001) {
              return 0;
          } else {
              return d;
          }
      }

* So far we've not used anything other than what was passed to the lambda within it,
  but we can also use other variables, within the lambda

    [&var] capture scope var by reference
    [&] captures all variables used in the lambda by reference
    [=] captures all variables used in the lambda by value
    [&, var] captures variables like with [&], but var by value
    [=, &var] captures variables like with [=], but var by reference


========== Classes
* Access Modifiers
    * public: can be accessed by any other code in the same assembly or another assembly that references it
    * private: can be accessed by code in the same class or struct
    * protected: can be accessed by code in the same class or struct, or in a derived class 

    * For Inheritance:
        * public: all members from base class are inherited as there are specified in the base class

        * private:
            * all members from base class are inherited as private
            * private members stay private and protected and public members become private
            * this does not affect the way the derived class accesses members inherited from its parent
            * it only affects the code trying to access those members through the derived class. 

        * protected: public and private members become protected, and private members stay private.
  
        * friend:
            * can access the private and protected members of the class in which it is declared as a friend
            * friendships are not symmetric.
            * friendships are not transitive.
            * friendships are not inherited.
            * access due to friendship is inherited.

* Overriding Functions
    * When a derived class creates a member function with the same return type
      and signature as a member function in the base class, but with a new implementation.

* Virtual
    * without "virtual" you "early binding"
        * which implementation of the method is used gets decided at compile time based on the type of the
          pointer that you call through.

    * with "virtual" you get "late binding"
        * which implementation of the method is used gets decided at run time based in the type of the pointed-to 
          object - what is was originally constructed as. 

    * To implement virtual functions, C++ uses a special form of late binding known as the virtual table
        * The virtual table is a lookup table of functions used to resolve function calls in a dynamic/late binding manner
        * Every class that uses virtual functions or is derived from a class that uses virtual functions is given it's own virtual table
        * It's simply a static array that the compiler sets up at compile time.  

* Nested Classes
    * class which is declared in another enclosing class.
    * the usual access rules are obeyed. 
    * a nested class is a member and as such has the same access rights (to enclosing
      class) as any other member
    * the nested class can access private variables.


========== Input/Output
* Types: cin, cout, cerr, clog

* Out example:
    cout << "string \n";

* In example:
    int age;
    cin >> age;


========== Misc
* Forward Declaration
    * Use if only a pointer is needed to a class.
    * If pointer is dereferenced in the file, must use header.
    * Avoids unnecssary parsing of header files during compilation.

    * Tells the compiler that the type exists, but compiler does not know size, members, or methods. 
    * Considered an incomplete type. 
    * Cannot use the type to declare a member, or a base class, since the compiler would need to know the layout of the type. 

    * http://stackoverflow.com/questions/553682/when-can-i-use-a-forward-declaration


* Binding
    * refers to the process that is used to convert identifiers (variables and function names) into machine language addresses. 
  
    * Early Binding
        * also called static
        * the precise function's address is known at compilation

    * Late Binding
        * also called dynamic
        * the function's address is not known until runtime
        * examples:
            * function pointers are considered late binding.
            * using virtual functions which require the virtual table


========== Key Words
* "constexpr"
    * declares that it is possible to evaluate the value of a function or variable at compile time
    * used instead of #DEFINE (scoping, namespace, and preprocessor replace) or
        const (const vars cannot be used in compile time evals)

* "auto"
    * uses type inference to tell compiler to infer the variable's type from the initialized type
    * useful for polymorphism and templates since we don't have to define a specific variable type
    * example 1

        std::map<std::string, std::string> mapOfStrs;
        // Insert data in Map
        mapOfStrs.insert(std::pair<std::string, std::string>("first", "1") );
        mapOfStrs.insert(std::pair<std::string, std::string>("sec", "2") );

        // now we want to iterate through the map. we have two options
        std::map<std::string, std::string>::iterator it = mapOfStrs.begin();
        // OR
        auto it = mapOfStrs.begin();
        while (it != mapOfStrs.end());


    * example 2 (used as return type of function)

        auto sum(int x, int y) -> int {
            return x = y;
        }
        auto value = sum(3, 5);


* "decltype"
    * extracts the type from the variable or passed in expression
    * primarily used in generic programming, where it is difficult to express types taht depend on template params
    * examples
        int fun1() {return 10;}

        int main() {
            float foo = 2.0;

            // data type x is the same as return type of fun1()
            decltype(fun1()) x;

            // data type y is float (same as foo)
            decltype(foo) y;

            return 0;
        }

* "explicit"
    * specifies that a constructor is explicit, that is, it cannot be used for implicit conversions and copy-initialization
* "noexcept"
    * compile time check that returns true if an expression is declared to not throw any exceptions

* "static"
    * static class: does not exist in C++

    * static member data and function: exist not in the object but in the scope of the class.
      Therefore, they can be called without having an object of that class.

    * static member data: shared between all instances of a class

    * static member function: can be called without needing an object of class.

    * no storage space set aside for static members as a result of instantiating a class object.
      The static member data must be defined outside instantiation of a class object. 

    * static local variables (in functions): to keep persistent variable within scope of a function.

* "const"
    * const variables: variables that cannot be changed
    * const in method definition: indicate that the function will not modify any variables in function body

* "volatile":
    * same use as in C
    * volatile may have no effect on a field if the volatile field exceeds the max size that can be copied
      on the current architecture by using one instruction


========== Syntax
    * foo *array[10];   // array of 10 foo pointers
    * foo (*array)[10]; // pointer to array of 10 foos


    * This is an array of 8 pointers to pointers to VirtualDevice:
        VirtualDevice ***m_pVirtualDeviceTable;
        m_pVirtualDeviceTable = new VirtualDevice **[DM_MAX_DEVICES];




========== Questions (TODO)
1. What is the lifetime of a static variable in side a function that is a member of a class?

////////////////////////////////

You need a virtual desctructor whenever you want to destroy a child object through a pointer to
a base class.

////////////////////////////////

Making Base Class Destructors Virtual

Here is the problem scenario:

class Base
{
  // note that there is no virtual destructor, just default normal destructor
};

class Derived : public Base
{
  ~Derived()
  {
    // Do some important cleanup
  }
}

Base *b = new Derived();
// do some stuff with b
delete b;     // This is a problem

Explanation: The call to the desctructor will be resolved like any non-virtual code.
             The destructor of the base class will be called but not the one of the
             derived class. This results in resource leakage.

////////////////////////////////

Why make destructors private or protected?

If the base class destructor is private or protected, delete cannot be called through a base-class pointer. 

It is used to allow any other polymorphic use of derived classes via pointers to base, but not allow
the user to delete using such a pointer.

If an object will not be deleted via a pointer to its base, then the destructor should be declared
with protected or private access. This will result in a compile error should an attempt be made to
delete the object incorrectly.

Use public virtual destructor if you need polymorphic deletion, if not then destructor does not
need to be virtual at all.

A base class destructor should be either public/virtual, or protected/non-virtual.
This leaves you with two situations:
1.  You want to allow polymorphic deletion through a base ptr, in which case the destructor
    must be virtual and public.
2.  You don't, in which case the destructor should be non-virtual and protected, the latter
    to prevent unwanted usage. 

Constructors can be declared private to prevent their creation on the stack. You would also need a 
static class member method that calls new on the class and returns a pointer to it.

A classes new operator can be declared as private to prevent new from being used to instantiate it.



////////////////////////////////

Object files (produced from compiler) only need function declarations, not definitions. The linker 
requires definitions to resolve symbols for creation of an executable. 

Does the linker need definitions when creating a library? 
